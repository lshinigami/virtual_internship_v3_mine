На какие моменты обратить внимание при code review?

Далее приведем часто встречающиеся недочеты
в коде требующие улучшений:

1. Не используемые import команды.
Не оставляйте в коде unused import statements.
Они загрязняют код и просто вводят в заблуждение.
Это касается как продакшн кода, так и тестов.

2. Закомментированные куски кода или целые классы.
Удаляйте из кода не используемые куски кода. Не
нужно их просто комментировать и оставлять в коде.
Это касается как продакшн кода, так и тестов.

3. Идентификатор доступа public для классов.
Если класс используется только в том пакете,
где сам же и находится, то он не должен быть
публичным! Публичными классами должны быть
только те классы, которые используются в
других пакетах (не там где они лежат).

4. Объявление лишней переменной вместо того,
чтобы сразу одной строкой вернуть результат
из метода.

Long differenceInDays = TimeUnit.DAYS.convert(differenceInMillis, TimeUnit.MILLISECONDS);
return differenceInDays;

5. Использование правильного форматирования
и отступов в коде.

6. Свойства классов должны быть объявлены как private.
Если у свойства класса нет идентификатора private,
то это прямое нарушение инкапсуляции.

7. Использование костыльного способа работы
со временем вместо стандартного API.

return (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);

long diff = date2.getTime() - date1.getTime();
return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);

8. Использование try catch блока для ловли
NullPointerException.

catch (NullPointerException nullPointerException) {
    System.out.println("Something went wrong");
}


9. Единственный дефолтный конструктор в классе.
Дефолтный конструктор (если он единственный в классе)
объявлять не нужно, компилятор Java добавит его
самостоятельно.

class TravelCalculatePremiumRequestValidator {
   public TravelCalculatePremiumRequestValidator() {

   }
}